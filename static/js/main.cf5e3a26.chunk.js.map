{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","index.js"],"names":["Square","props","className","highlight","onClick","value","Board","squares","winnerLine","renderSquare","i","includes","key","content","length","row","j","push","renderBoard","Game","status","useState","Array","fill","location","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","isAscending","setIsAscending","current","winInfo","calculateWinner","winner","moves","map","item","index","step","col","Math","trunc","convertToLocation","desc","classnames","isDraw","reverse","newHistory","slice","handleClick","line","lines","a","b","c","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf5e3a26.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square(props){\r\n    const className = 'square' + (props.highlight ? ' highlight' : '');\r\n    return (\r\n        <button className={className} onClick = {props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './../Square';\r\n\r\nfunction Board({squares, onClick, winnerLine}) {\r\n    const renderSquare = (i) => (\r\n        <Square\r\n            highlight={winnerLine && winnerLine.includes(i)}\r\n            key={i}\r\n            value={squares[i]}\r\n            onClick={() => onClick(i)}\r\n        />\r\n    );\r\n\r\n    const renderBoard = (squares) => {\r\n        const content = [];\r\n        for (let i = 0; i < squares.length; i += 3) {\r\n            const row = [];\r\n            for (let j = i; j < i + 3; j++) {\r\n                row.push(renderSquare(j));\r\n            }\r\n            content.push(\r\n                <div key={i} className='board-row'>\r\n                    {row}\r\n                </div>\r\n            );\r\n        }\r\n        return content;\r\n    };\r\n\r\n    return <div>{renderBoard(squares)}</div>;\r\n}\r\n\r\nexport default Board;","import classnames from 'classnames';\r\nimport React, { useState } from 'react';\r\nimport Board from './../Board';\r\n\r\nexport default function Game() {\r\n    const [history, setHistory] = useState([\r\n        {\r\n          squares: Array(9).fill(null),\r\n          location: null,\r\n        },\r\n    ]);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [isAscending, setIsAscending] = useState(true);\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //     history: [{\r\n    //         squares: Array(9).fill(null),\r\n    //     }],\r\n    //     stepNumber: 0,\r\n    //     xIsNext: true,\r\n    //     isAscending: true\r\n    //     };\r\n    // }\r\n\r\n\r\n    // handleClick(i) {\r\n    //     const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    //     const current = history[history.length - 1];\r\n    //     const squares = current.squares.slice();\r\n    //     if (calculateWinner(squares).winner || squares[i]) {\r\n    //     return;\r\n    //     }\r\n    //     squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    //     this.setState({\r\n    //     history: history.concat([{\r\n    //         squares: squares,\r\n    //         lastMoveSquare: i\r\n    //     }]),\r\n    //     stepNumber: history.length,\r\n    //     xIsNext: !this.state.xIsNext,\r\n    //     });\r\n    // }\r\n\r\n    const handleClick = (i) => {\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        const { winner } = calculateWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? 'X' : 'O';\r\n        setHistory([...newHistory, { squares, step: i }]);\r\n        setStepNumber(newHistory.length);\r\n        setXIsNext(!xIsNext);\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setHistory([\r\n            {\r\n            squares: Array(9).fill(null),\r\n            location: null,\r\n            },\r\n        ]);\r\n        setXIsNext(true);\r\n        setStepNumber(0);\r\n        setIsAscending(true);\r\n    };\r\n    \r\n\r\n    // jumpTo(step) {\r\n    //     this.setState({\r\n    //     stepNumber: step,\r\n    //     xIsNext: (step % 2) === 0,\r\n    //     });\r\n    // }\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext(step % 2 === 0);\r\n    };\r\n\r\n    const convertToLocation = (step) => {\r\n        const col = (step % 3) + 1;\r\n        const row = Math.trunc(step / 3) + 1;\r\n        return [row, col];\r\n    };\r\n\r\n    const handleSortToggle = () => {\r\n        setIsAscending(!isAscending);\r\n    };\r\n\r\n    {\r\n        // const history = this.state.history;\r\n        const current = history[stepNumber];\r\n        // const stepNumber = this.state.stepNumber;\r\n        const winInfo = calculateWinner(current.squares);\r\n        const winner = winInfo.winner;\r\n        // const isAscending = this.state.isAscending;\r\n        //const { winner, line } = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((item, index) => {\r\n        //const lastMoveSquare = step.lastMoveSquare;\r\n        const [row, col] = convertToLocation(item.step);\r\n        const desc = index ?\r\n            'Go to move #' + index + ' (' + col + ', ' + row + ')':\r\n            'Go to game start';\r\n        return (\r\n            <li key={index}>\r\n            <button\r\n                className={classnames({ 'selected-item': stepNumber === index })}\r\n                onClick={() => jumpTo(index)}>{desc}</button>\r\n            </li>\r\n        );\r\n        });\r\n        \r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } \r\n        else if (winInfo.isDraw) {\r\n            status = \"Draw\";\r\n        }\r\n        else {\r\n            status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        if (!isAscending) {\r\n            moves.reverse();\r\n        }\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board\r\n                squares={current.squares}\r\n                onClick={(i) => handleClick(i)}\r\n                winnerLine={winInfo.line}\r\n            />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <button onClick={handleReset}>Reset</button>\r\n                <button onClick={handleSortToggle}>\r\n                    {isAscending ? 'Ascending' : 'Descending'}\r\n                </button>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {\r\n            winner: squares[a],\r\n            line: lines[i],\r\n            isDraw: false,\r\n        };\r\n        }\r\n    }\r\n\r\n    let isDraw = true;\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] === null) {\r\n        isDraw = false;\r\n        break;\r\n        }\r\n    }\r\n    return {\r\n        winner: null,\r\n        line: null,\r\n        isDraw: isDraw,\r\n    };\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './components/Game';\r\n  \r\n  \r\n\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Game />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}