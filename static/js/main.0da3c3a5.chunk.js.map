{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","status","current","winInfo","calculateWinner","winner","moves","map","step","move","lastMoveSquare","col","Math","floor","desc","jumpTo","isDraw","reverse","handleClick","line","handleSortToggle","slice","length","setState","concat","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0da3c3a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// class Square extends React.Component {\r\n//   render() {\r\n//     return (\r\n//         <button className=\"square\" onClick={() => this.props.onClick()}>\r\n//           {this.props.value}\r\n//         </button>\r\n//       );\r\n//     }\r\n// }\r\nfunction Square(props){\r\n  const className = 'square' + (props.highlight ? ' highlight' : '');\r\n  return (\r\n    <button className={className} onClick = {props.onClick}>\r\n        {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winLine = this.props.winLine;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        highlight={winLine && winLine.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for(let i = 0; i < boardSize; ++i) {\r\n      let row = [];\r\n      for(let j = 0; j < boardSize; ++j) {\r\n        row.push(this.renderSquare(i * boardSize + j));\r\n      }\r\n      squares.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n\r\n    return (\r\n      <div>{squares}</div>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAscending: true\r\n    };\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const stepNumber = this.state.stepNumber;\r\n    const winInfo = calculateWinner(current.squares);\r\n    const winner = winInfo.winner;\r\n    const isAscending = this.state.isAscending;\r\n\r\n    let moves = history.map((step, move) => {\r\n      const lastMoveSquare = step.lastMoveSquare;\r\n      const col = 1 + lastMoveSquare % 3;\r\n      const row = 1 + Math.floor(lastMoveSquare / 3);\r\n      const desc = move ?\r\n        'Go to move #' + move + ' (' + col + ', ' + row + ')':\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === stepNumber ? 'selected-item' : ''}\r\n            onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n    \r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } \r\n    else if (winInfo.isDraw) {\r\n      status = \"Draw\";\r\n    }\r\n    else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winLine={winInfo.line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={() => this.handleSortToggle()}>\r\n            {isAscending ? 'Descending' : 'Ascending'}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        lastMoveSquare: i\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  handleSortToggle() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending\r\n    });\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: lines[i],\r\n        isDraw: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  let isDraw = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) {\r\n      isDraw = false;\r\n      break;\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    line: null,\r\n    isDraw: isDraw,\r\n  };\r\n}\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}